import { ConfigService } from '@nestjs/config';
import { IAuthPassword, IAuthPayloadOptions, IAuthRefreshTokenOptions } from 'src/common/auth/interfaces/auth.interface';
import { IAuthService } from 'src/common/auth/interfaces/auth.service.interface';
import { HelperDateService } from 'src/common/helper/services/helper.date.service';
import { HelperEncryptionService } from 'src/common/helper/services/helper.encryption.service';
import { HelperHashService } from 'src/common/helper/services/helper.hash.service';
import { HelperStringService } from 'src/common/helper/services/helper.string.service';
export declare class AuthService implements IAuthService {
    private readonly helperHashService;
    private readonly helperDateService;
    private readonly helperStringService;
    private readonly helperEncryptionService;
    private readonly configService;
    private readonly accessTokenSecretKey;
    private readonly accessTokenExpirationTime;
    private readonly accessTokenNotBeforeExpirationTime;
    private readonly accessTokenEncryptKey;
    private readonly accessTokenEncryptIv;
    private readonly refreshTokenSecretKey;
    private readonly refreshTokenExpirationTime;
    private readonly refreshTokenNotBeforeExpirationTime;
    private readonly refreshTokenEncryptKey;
    private readonly refreshTokenEncryptIv;
    private readonly payloadEncryption;
    private readonly prefixAuthorization;
    private readonly audience;
    private readonly issuer;
    private readonly subject;
    private readonly passwordExpiredIn;
    private readonly passwordSaltLength;
    constructor(helperHashService: HelperHashService, helperDateService: HelperDateService, helperStringService: HelperStringService, helperEncryptionService: HelperEncryptionService, configService: ConfigService);
    encryptAccessToken(payload: Record<string, any>): Promise<string>;
    decryptAccessToken({ data, }: Record<string, any>): Promise<Record<string, any>>;
    createAccessToken(payloadHashed: string | Record<string, any>): Promise<string>;
    validateAccessToken(token: string): Promise<boolean>;
    payloadAccessToken(token: string): Promise<Record<string, any>>;
    encryptRefreshToken(payload: Record<string, any>): Promise<string>;
    decryptRefreshToken({ data, }: Record<string, any>): Promise<Record<string, any>>;
    createRefreshToken(payloadHashed: string | Record<string, any>, options?: IAuthRefreshTokenOptions): Promise<string>;
    validateRefreshToken(token: string): Promise<boolean>;
    payloadRefreshToken(token: string): Promise<Record<string, any>>;
    validateUser(passwordString: string, passwordHash: string): Promise<boolean>;
    createPayloadAccessToken(data: Record<string, any>): Promise<Record<string, any>>;
    createPayloadRefreshToken(_id: string, options: IAuthPayloadOptions): Promise<Record<string, any>>;
    createSalt(length: number): Promise<string>;
    createPassword(password: string): Promise<IAuthPassword>;
    createPasswordRandom(): Promise<string>;
    checkPasswordExpired(passwordExpired: Date): Promise<boolean>;
    getTokenType(): Promise<string>;
    getAccessTokenExpirationTime(): Promise<number>;
    getRefreshTokenExpirationTime(): Promise<number>;
    getIssuer(): Promise<string>;
    getAudience(): Promise<string>;
    getSubject(): Promise<string>;
    getPayloadEncryption(): Promise<boolean>;
}
