import { ConfigService } from '@nestjs/config';
import { IDatabaseCreateOptions, IDatabaseFindAllOptions, IDatabaseFindOneOptions, IDatabaseGetTotalOptions, IDatabaseManyOptions, IDatabaseSaveOptions } from 'src/common/database/interfaces/database.interface';
import { HelperNumberService } from 'src/common/helper/services/helper.number.service';
import { ENUM_SETTING_DATA_TYPE } from 'src/common/setting/constants/setting.enum.constant';
import { SettingCreateDto } from 'src/common/setting/dtos/setting.create.dto';
import { SettingUpdateValueDto } from 'src/common/setting/dtos/setting.update-value.dto';
import { ISettingService } from 'src/common/setting/interfaces/setting.service.interface';
import { SettingDoc, SettingEntity } from 'src/common/setting/repository/entities/setting.entity';
import { SettingRepository } from 'src/common/setting/repository/repositories/setting.repository';
export declare class SettingService implements ISettingService {
    private readonly settingRepository;
    private readonly configService;
    private readonly helperNumberService;
    private readonly mobileNumberCountryCodeAllowed;
    private readonly passwordAttempt;
    private readonly maxPasswordAttempt;
    constructor(settingRepository: SettingRepository, configService: ConfigService, helperNumberService: HelperNumberService);
    findAll(find?: Record<string, any>, options?: IDatabaseFindAllOptions): Promise<SettingEntity[]>;
    findOneById(_id: string, options?: IDatabaseFindOneOptions): Promise<SettingDoc>;
    findOneByName(name: string, options?: IDatabaseFindOneOptions): Promise<SettingDoc>;
    getTotal(find?: Record<string, any>, options?: IDatabaseGetTotalOptions): Promise<number>;
    create({ name, description, type, value }: SettingCreateDto, options?: IDatabaseCreateOptions): Promise<SettingDoc>;
    updateValue(repository: SettingDoc, { type, value }: SettingUpdateValueDto, options?: IDatabaseSaveOptions): Promise<SettingDoc>;
    delete(repository: SettingDoc, options?: IDatabaseSaveOptions): Promise<SettingDoc>;
    getValue<T>(setting: SettingDoc): Promise<T>;
    checkValue(value: string, type: ENUM_SETTING_DATA_TYPE): Promise<boolean>;
    getMaintenance(): Promise<boolean>;
    getMobileNumberCountryCodeAllowed(): Promise<string[]>;
    getPasswordAttempt(): Promise<boolean>;
    getMaxPasswordAttempt(): Promise<number>;
    deleteMany(find: Record<string, any>, options?: IDatabaseManyOptions): Promise<boolean>;
}
