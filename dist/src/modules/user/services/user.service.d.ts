import { IUserService } from 'src/modules/user/interfaces/user.service.interface';
import { IDatabaseCreateOptions, IDatabaseExistOptions, IDatabaseFindAllOptions, IDatabaseFindOneOptions, IDatabaseGetTotalOptions, IDatabaseManyOptions, IDatabaseCreateManyOptions, IDatabaseSaveOptions } from 'src/common/database/interfaces/database.interface';
import { UserDoc, UserEntity } from 'src/modules/user/repository/entities/user.entity';
import { UserRepository } from 'src/modules/user/repository/repositories/user.repository';
import { HelperDateService } from 'src/common/helper/services/helper.date.service';
import { ConfigService } from '@nestjs/config';
import { HelperStringService } from 'src/common/helper/services/helper.string.service';
import { UserCreateDto } from 'src/modules/user/dtos/user.create.dto';
import { IAuthPassword } from 'src/common/auth/interfaces/auth.interface';
import { AwsS3Serialization } from 'src/common/aws/serializations/aws.s3.serialization';
import { UserUpdateNameDto } from 'src/modules/user/dtos/user.update-name.dto';
import { IUserDoc, IUserEntity } from 'src/modules/user/interfaces/user.interface';
import { UserPayloadSerialization } from 'src/modules/user/serializations/user.payload.serialization';
import { UserImportDto } from 'src/modules/user/dtos/user.import.dto';
import { UserUpdateUsernameDto } from 'src/modules/user/dtos/user.update-username.dto';
import { UserUpdateGoogleSSODto } from 'src/modules/user/dtos/user.update-google-sso.dto';
export declare class UserService implements IUserService {
    private readonly userRepository;
    private readonly helperDateService;
    private readonly helperStringService;
    private readonly configService;
    private readonly uploadPath;
    private readonly authMaxPasswordAttempt;
    constructor(userRepository: UserRepository, helperDateService: HelperDateService, helperStringService: HelperStringService, configService: ConfigService);
    findAll(find?: Record<string, any>, options?: IDatabaseFindAllOptions): Promise<IUserEntity[]>;
    findOneById<T>(_id: string, options?: IDatabaseFindOneOptions): Promise<T>;
    findOne<T>(find: Record<string, any>, options?: IDatabaseFindOneOptions): Promise<T>;
    findOneByUsername<T>(username: string, options?: IDatabaseFindOneOptions): Promise<T>;
    findOneByEmail<T>(email: string, options?: IDatabaseFindOneOptions): Promise<T>;
    findOneByMobileNumber<T>(mobileNumber: string, options?: IDatabaseFindOneOptions): Promise<T>;
    getTotal(find?: Record<string, any>, options?: IDatabaseGetTotalOptions): Promise<number>;
    create({ firstName, lastName, email, mobileNumber, role, signUpFrom, }: UserCreateDto, { passwordExpired, passwordHash, salt, passwordCreated }: IAuthPassword, options?: IDatabaseCreateOptions): Promise<UserDoc>;
    existByEmail(email: string, options?: IDatabaseExistOptions): Promise<boolean>;
    existByMobileNumber(mobileNumber: string, options?: IDatabaseExistOptions): Promise<boolean>;
    existByUsername(username: string, options?: IDatabaseExistOptions): Promise<boolean>;
    delete(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updateName(repository: UserDoc, { firstName, lastName }: UserUpdateNameDto, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updateUsername(repository: UserDoc, { username }: UserUpdateUsernameDto, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updateGoogleSSO(repository: UserDoc, { accessToken, refreshToken }: UserUpdateGoogleSSODto, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updatePhoto(repository: UserDoc, photo: AwsS3Serialization, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updatePassword(repository: UserDoc, { passwordHash, passwordExpired, salt, passwordCreated }: IAuthPassword, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    active(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserEntity>;
    inactive(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    inactivePermanent(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    blocked(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    unblocked(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    maxPasswordAttempt(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    increasePasswordAttempt(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    resetPasswordAttempt(repository: UserDoc, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    updatePasswordExpired(repository: UserDoc, passwordExpired: Date, options?: IDatabaseSaveOptions): Promise<UserDoc>;
    joinWithRole(repository: UserDoc): Promise<IUserDoc>;
    createPhotoFilename(): Promise<Record<string, any>>;
    payloadSerialization(data: IUserDoc): Promise<UserPayloadSerialization>;
    import(data: UserImportDto[], role: string, { passwordCreated, passwordHash, salt }: IAuthPassword, options?: IDatabaseCreateManyOptions): Promise<boolean>;
    deleteMany(find: Record<string, any>, options?: IDatabaseManyOptions): Promise<boolean>;
}
